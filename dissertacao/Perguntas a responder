Quais as vantagens dos modelos sob o código-fonte? Isso justifica o uso de MDD e não de desenvolvimento tradicional na nossa abordagem. Pois apesar da nossa abordagem focar em MDD ela pode ser aplicada no desenvolvimento tradiconal. -> Será mesmo? Acho que estou mais pegando coisas do DT e aplicando ao MDD, assim acho que ja existe isso pro DT. Estou fazendo isso porque não conheço algo paracido com o CoMDD. Além do que nunca ouvi falar de uma IDE como serviço.
-> Vantagens: modelos são mais fáceis de entender e geram mais comunicação/colaboração.

Qual a diferença de usar dsls (MDD) como o desenvolvimento tradicional? Acho que a contribuição está no desenvolvimento de software e nao de mdd. Usamos mdd só porque modelos sao mais fáceis de entender/fazer do que código-fonte. Nossa abordagem pode ser usada em desenvolvimento normal, mas a tendencia é mdd por aumentar produtividade e reuso, além dos vários outros benefícios.


Nossa implementação já permite a colaboração. Pq? Pq ela estando numa wiki já permite que um modelo seja construído em colaboração com outras pessoas. Mas qual a diferença de termos um editor na web não simultaneo alterando um mesmo arquivo, para termos o eclipse e um svn?
Será que o CoMDD traz inovação qnd comparado ao uso do eclipse+svn?
Que beneficios em termos de colaboração o comdd traz qnd comparado a abordagens eclipse+svn?
Que outros benefícios posso trazer?
Como o comdd pode facilitar a comunicaçao mais que um gforge ou um bugtrack ou outra ferramenta de gestão de configuração on line?
Como provar?
Como medir melhorias? 
Como posso fazer uma avaliação qualitativa?
O que posso considerar como evidências?

Quais ferramentas existem no DT e nao no MDD?

------------------------

1- Focar em SAAS?
2- Focar em Edição de Tempo Real e Edição de Subartefatos (ou seja, artefatos dependentes)?
Acho que 1 e 2 devem ser meu foco (motivação: aumento de colaboração em virtude de 1 e 2) e o resto adicional.


Aonde vimos que o MDD não pode ser aplicado ou não é aplicado de maneira distribuída ou colaborativa como no desenvolvimento tradicional?

Qual a hipótese? O que temos que mostrar/comprovar?

O que é uma abordagem?

Como vou definir o CoMDD?
-> Definir o que deve ter (pontos importantes em uma abordagem colaborativa), como deve ser e o porquê.
-> Avaliação realizada com os usuários.
Eu acho que temos que falar sim da edição simultanea e DR (p ex) embora nao tenhamos implementado. Daí, no final, dizemos que implementamos parte do comdd e essa parte foi testada. Mas o todo o resto (ed simultanea, DR...) foi justificado, ou seja, foi evidenciado sua importância.

Posso definir (justificar) n coisas e implementar (avaliar) n-2?


-------------------------

SOBRE A IMPLEMENTAÇÃO:
O que mais implementar?
    - Erros?
    - Melhorar a DSL (gramática)?
    - Edição de subartefatos e que compõem um artefato o qual irá gerar código?

Colocar a definição das transformações tbm na wiki, ou seja, o suporte a metamodelagem?



Que tal:
1- Código-fonte é mais complicado de ser desenvolvido por mais de uma pessoa, logo é também menos reutilizável
(preciso de referencia? quando posso afirmar sem referenciar?)
2- Modelos são mais colaborativos e reusáveis
3- Artefatos online (wikis, gdocs) são mais colaborativos que controles de versao, bug tracks, ou outras ferramentas de gestao de configuração por terem interfaces mais amigáveis -> Assim a Web aumenta ainda mais colaboração (cooperação e reuso)
4- LOGO: MDD na Web (serviço) traz mais reuso (do metamodelo), cooperação e produtividade








